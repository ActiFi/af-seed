var moment = require('moment');
var promise = require('bluebird');
var request = require('request');

var cache = {};

var tenantConfig = {

  hoursToCache:2,

  getCache:function(subDomain){
    var cachedConfig = cache[subDomain];
    var hoursToCache = moment().subtract(tenantConfig.hoursToCache, 'hours');
    if(cachedConfig && moment(cachedConfig.cachedOn).isAfter(hoursToCache))
      return cachedConfig.config;
    return null;
  },
  setCache:function(subDomain, config){
    // only cache production environments
    if(process.env.NODE_ENV == 'production')
      cache[domain] = {
        cachedOn:moment(),
        config:config
      };
  },
  clearCache:function(domain){
    if(domain)
      delete cache[domain];
    else
      cache = {};
  },


  get:function(hostname){
    return new promise(function(resolve, reject){

      // if no subdomain...
      if(!hostname)
        return reject('cannot get tenantConfig, no hostname defined');

      var cachedConfig = tenantConfig.getCache(hostname);
      if(cachedConfig){
        // CACHED
        resolve(cachedConfig);

      } else {
        // INVALID CACHE (re-request it)
        var host = 'https://'+hostname;
        if (process.env.NODE_ENV == 'development')
          host = 'http://localhost';

        request(host+'/tenant/tenantContent-json.php', function (error, response, body) {
          if (!error && response.statusCode == 200) {
            var config = JSON.parse(body);
            tenantConfig.setCache(hostname, config);
            resolve(config);
          } else {
            reject(error);
          }
        })
      }
    })
  }
};

module.exports = tenantConfig;