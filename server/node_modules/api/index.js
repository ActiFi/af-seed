var fs = require('fs');
var path = require('path');
var _ = require('lodash');
var validator = require('express-validation');


var exportApi = {

  // holds security schema's
  schemas:{},

  loadRoute:function(route, router){

    // sanity checks
    if(!_.isPlainObject(route))
       throw new Error('Route definitions must be an object. Received:' + typeof route);
    if(!_.has(route, 'path'))
       throw new Error('Routes require a path property.');
    if(!_.has(route, 'handler'))
       throw new Error('Routes require a handler property. Invalid Route: ' + route.path);

    // more sanity checks
    route.method = route.method || 'post';
    route.method = route.method.toLowerCase();
    route.access = route.access || ['public'];


    // create middleware based on access schemas defined on the route definition
    // eg: access:['admin'] will push middleware defined in schemas['admin'] onto the route.
    var schemaMiddleware = [];
    if(route.access && route.access.length){
      _.each(route.access, function(accessName){
        if(_.has(exportApi.schemas, accessName))
          schemaMiddleware.push(exportApi.schemas[accessName]);
        else
          throw new Error(accessName + ' security schema not found for route ' + route.path);
      });
    }

    // add route validator:
    var validators = [];
    if(route.validate)
      validators.push(validator(route.validate));


    // loads route into router
    var args = [].concat([route.path], schemaMiddleware, validators, [route.handler]);
    router[route.method].apply(router, args);

    console.log('Route Loaded:', route.path);
    return router;
  },

  // crawl directory...
  loadRouteDir:function(dir, router){
    console.log('Api Loading Routes:', dir);

    var files = fs.readdirSync(dir);
    files.forEach(function (file) {
      file = path.join(dir, file);
      var stat = fs.statSync(file);
      if (stat.isDirectory()) {
        router = exportApi.loadRoutes(file, router);
      } else {
        if(path.extname(file) === '.js') {
          var routeDesc = require(file);
          if(_.isArray(routeDesc)) {
            _.each(routeDesc, function (route) {
              router = exportApi.loadRoute(route, router);
            });
          } else {
            router = exportApi.loadRoute(routeDesc, router);
          }
        }
      }
    });
    return router;
  }
};

module.exports = exportApi;